<DocumentElement xmlns="http://tempuri.org/Ruleset.xsd">
  <Scripts>
    <ScriptName>RollHandlers</ScriptName>
    <FolderID>26</FolderID>
    <Script>OldActionRoll=nil;
OldOnChatDragStart=nil;

function onInit()
--	ChatManager.registerDiceLandedCallback(onDiceLanded);
	OldActionRoll=ActionsManager.actionRoll;
	OldOnChatDragStart=ActionsManager.onChatDragStart;
	ActionsManager.onChatDragStart=NewOnChatDragStart;
--	ActionsManager.actionRoll=NewActionRoll;
end

-- NOTE: tTargetGroups parameter for this function assumes a list of targeting groups
function NewActionRoll(rSource, tTargetGroups, rRolls)
-- To prevent all rRolls-rTargeting combinations from being rolled
	local bModStackUsed = false;
	ActionsManager.lockModifiers();

	for i=1,#tTargetGroups do
		if rRolls[i] then
			if ActionsManager.applyModifiersAndRoll(rSource, tTargetGroups[i], true, rRolls[i]) then
				bModStackUsed = true;
			end
		else
			if ActionsManager.applyModifiersAndRoll(rSource, tTargetGroups[i], true, rRolls[1]) then
				bModStackUsed = true;
			end
		end
	end
	
	ActionsManager.unlockModifiers(bModStackUsed);
end

function NewOnChatDragStart(draginfo)
	local sDragType = draginfo.getType();
	if sDragType and sDragType:match("_sSource_") then
		local sSource="";
		sDragType, sSource=sDragType:match("(.*)_sSource_(.+)");
--		sDragType="AttackCheck";
		draginfo.setType(sDragType);
		ActionsManager.encodeActors(draginfo, ActorManager.resolveActor(sSource));
	end
	
	if GameSystem.actions[sDragType] and GameSystem.actions[sDragType].sIcon then
		draginfo.setIcon(GameSystem.actions[sDragType].sIcon);
	end
end


--function onDiceLanded(draginfo)
--    local sDragType = draginfo.getType();
--    if GameSystem.actions[sDragType] then
--        local rSource, rRolls, aTargets = ActionsManager.decodeActionFromDrag(draginfo, true);
--        if not aTargets or (#aTargets == 0) then
--            ActionsManager.resolveAction(rSource, nil, rRoll);
--        else
--            -- Resolve the action against the target identified by nTarget index
--            ActionsManager.resolveAction(rSource, aTargets[tonumber(rRolls[1].nTarget)], rRolls[1]);
--        end
--    
--        return true;
--    end
--end


function RollResultFrom0to99(rRoll)
	if rRoll and rRoll.aDice and rRoll.nTotal then
		for i=1,#rRoll.aDice do
			rRoll.aDice[i].value=rRoll.aDice[i].value%100;
			rRoll.aDice[i].result=rRoll.aDice[i].result%100;
		end
		rRoll.aDice.total=rRoll.aDice.total%100;
		rRoll.nTotal=rRoll.nTotal%100;
	else -- Build rRoll from chat drag information
		rRoll.nTotal=rRoll.nMod;
		rRoll.aDice["total"]=rRoll.nMod;
		rRoll.aDice["expr"]="d100";
		rRoll.aDice[1]={};
		rRoll.aDice[1]["value"]=rRoll.nMod;
		rRoll.aDice[1]["type"]="d100";
		rRoll.aDice[1]["result"]=rRoll.nMod;	
--		{ s'nBonuses' = s'0', 
--		s'aDice' = { #1 = { s'value' = #85, s'type' = s'd100', s'result' = #85 }, s'expr' = s'1d100', s'total' = #85 }, 
--		s'nMod' = #0, 
--		s'sType' = s'AttackCheck', 
--		s'bSecret' = bFALSE, 
--		s'nTotal' = #85, 
--		s'sDesc' = s'[MELEE ATTACK] Melee (vs 65)' }

--		{ s'aDice' = {  }, s'nMod' = #85, s'sType' = s'AttackCheck', s'sDesc' = s'[MELEE ATTACK] Melee (vs 65) [FAILURE]', s'bSecret' = bFALSE }
		rRoll.sDesc=rRoll.sDesc:gsub(" %[CRITICAL FAILURE%]", "");
		rRoll.sDesc=rRoll.sDesc:gsub(" %[TWO SUPERIOR FAILURES%]", "");
		rRoll.sDesc=rRoll.sDesc:gsub(" %[ONE SUPERIOR FAILURE%]", "");
		rRoll.sDesc=rRoll.sDesc:gsub(" %[FAILURE%]", "");
		rRoll.sDesc=rRoll.sDesc:gsub(" %[CRITICAL SUCCESS%]", "");
		rRoll.sDesc=rRoll.sDesc:gsub(" %[TWO SUPERIOR SUCCESSES%]", "");
		rRoll.sDesc=rRoll.sDesc:gsub(" %[ONE SUPERIOR SUCCESS%]", "");
		rRoll.sDesc=rRoll.sDesc:gsub(" %[SUCCESS%]", "");

		rRoll.nMod=0;
		rRoll.sTarget=rRoll.sDesc:match("vs (%d+)") or "";
	end
	return rRoll;
end

function CheckHandler(rSource, rTarget, rRoll)
	rRoll.bDefaulting=rRoll.bDefaulting=="true";
	rRoll=RollResultFrom0to99(rRoll)
	local nMod=rRoll.nMod;
	rRoll.nMod=0;
    local rMessage;
    if rRoll.sType=="DefenseCheck" or rRoll.sType=="DefenseSleightCheck" then
		rMessage = ActionsManager.createActionMessage(rTarget, rRoll);
	else
		rMessage = ActionsManager.createActionMessage(rSource, rRoll);
	end
	local sTarget=rRoll.sTarget or "0";
	local nTarget=tonumber(sTarget);
	
	local nWoundMod=0;
	local sWoundMod="";
	if rSource then
		nWoundMod=-10*DB.getValue(rSource.sCreatureNode..".Health.Physical.WoundsTaken", 0);
		if nWoundMod~=0 then
			sWoundMod=" [WOUNDS: "..nWoundMod.."]";
		end
	end
	
	local nTraumaMod=0;
	local sTraumaMod="";
	if rSource then
		nTraumaMod=-10*DB.getValue(rSource.sCreatureNode..".Health.Mental.TraumasTaken", 0);
		if nTraumaMod~=0 then
			sTraumaMod=" [TRAUMAS: "..nTraumaMod.."]";
		end
	end
		
	local nGeneralMod, sGeneralMod=Modifiers.getGeneralModifier()
	
	nTarget=nTarget+nMod+nGeneralMod+nWoundMod+nTraumaMod;
	rMessage.text=rMessage.text:gsub("vs "..sTarget, "vs "..math.max(0,nTarget))..sGeneralMod..sWoundMod..sTraumaMod;

	local nTotal = ActionsManager.total(rRoll);
	local sResult=RollChecks.RollCheck(nTotal, nTarget, rRoll.bDefaulting):upper();
	rMessage.text=rMessage.text.." ["..sResult.."]";

	if (rMessage.type=="AttackCheck" or rMessage.type=="AttackSleightCheck") and rSource and rSource.sCTNode then
		rMessage.type=rMessage.type.."_sSource_"..rSource.sCTNode;
	elseif (rMessage.type=="DefenseCheck" or rMessage.type=="DefenseSleightCheck") and rTarget and rTarget.sCTNode then
		rMessage.type=rMessage.type.."_sSource_"..rTarget.sCTNode;
	end
	
	Comm.deliverChatMessage(rMessage);
	return sResult, nTarget;
end

function AttackResultHandler(rSource, rTarget, rRoll)
	local sTypeResult="";
	local sTypeAttack="";
	if rRoll.sDesc:match("MELEE") then
		sTypeAttack="MELEE";
	else
		sTypeAttack="RANGED";
	end

	local nMod, sModDesc=Modifiers.getAttackModifiers(rSource, rTarget, rRoll);
	rRoll.nMod=rRoll.nMod+nMod;
	rRoll.sDesc=rRoll.sDesc..sModDesc;
	
	if rRoll then
		if rRoll.sType=="DefenseCheck" then
			local rAux=rSource;
			rSource=rTarget;
			rTarget=rAux;
			sTypeResult="Defense";
		elseif rRoll.sType=="AttackCheck" then
			sTypeResult="Attack";
		end
	end
	
--	local nPerc=tonumber(rRoll.sDesc:match("%((%d+)%% hit chance%)") or 100);
	local nPerc=tonumber(rRoll.sPerc or "100");
	
    local sResult, nTarget=CheckHandler(rSource, rTarget, rRoll);
    if rSource and rTarget and rSource.sCTNode and rTarget.sCTNode then
		combat.AddAttack(rSource.sCTNode, rTarget.sCTNode, sTypeAttack, sTypeResult, sResult, ActionsManager.total(rRoll), nTarget, false, nPerc);
    end
end

function InitHandler(rSource, rTarget, rRoll)
    local rMessage = ActionsManager.createActionMessage(rSource, rRoll);
    Comm.deliverChatMessage(rMessage);    

    if (rSource and rSource.sCTNode) then
        local nTotal = ActionsManager.total(rRoll);
        rCreature = DB.findNode(rSource.sCTNode);
        if rCreature then
			if Session.IsHost then
				DB.setValue(rCreature, "initresult", "number", nTotal);
			else
				RulesetWizard.changeDBValueOOB(DB.getChild(rCreature, "initresult"), nTotal);
			end
		end
    end
end

function SleightTargetingHandler(rSource, aTargeting, rRolls)
	if aTargeting and rSource then
		local rMessage = ChatManager.createBaseMessage(rSource);
		rMessage.icon = "roll_cast";
		for _,vTargetGroup in ipairs(aTargeting) do
			for _,vTarget in ipairs(vTargetGroup) do
				rMessage.text = "["..Interface.getString("sleight_cast").."] "..(rRolls[1].sleight or "").." [at "..Tools.getName(vTarget.sCTNode).."]";
				Comm.deliverChatMessage(rMessage);
			end
		end
	end
	return aTargeting;
end

function SleightResultHandler(rSource, rTarget, rRoll)
 	local sTypeResult="";
	if rRoll then
		if rRoll.sType=="DefenseSleightCheck" then
			local rAux=rSource;
			rSource=rTarget;
			rTarget=rAux;
			sTypeResult="Defense";
		elseif rRoll.sType=="AttackSleightCheck" then
			sTypeResult="Attack";
		end
	end
	local sResult, nTarget=CheckHandler(rSource, rTarget, rRoll);
    if rSource and rTarget and rSource.sCTNode and rTarget.sCTNode then
		combat.AddSleightAttack(rSource.sCTNode, rTarget.sCTNode, sTypeResult, sResult, ActionsManager.total(rRoll), nTarget);
    end
 end

function DamageTargetingHandler(rSource, aTargeting, rRolls)
	local rRoll={nBonuses=rRolls[1].nBonuses, aDice=rRolls[1].aDice, nMod=rRolls[1].nMod, sType=rRolls[1].sType, sDesc=rRolls[1].sDesc, nDamageMult=1 };
	local iRoll = 0;
	local sTypeAttack="";
	local nodeSourceRoll=nil;
	local nodeTargetRoll=nil;
	local sRollResult="";
	if aTargeting and rSource and rSource.sCTNode then
		for _,vTargetGroup in ipairs(aTargeting) do
			for _,vTarget in ipairs(vTargetGroup) do
				iRoll=iRoll+1;
				sTypeAttack=rRoll.sDesc:match("%[(.-) DAMAGE%]") or "";
				if sTypeAttack~="" then
--					sRollResult="Sin entrada en la lista de tiradas";
					sRollResult="";
					nodeSourceRoll=nil;
					nodeTargetRoll=nil;
					for _,n in pairs(DB.getChildren(rSource.sCTNode..".rolls")) do
						if DB.getValue(n, "TargetCTNode", "")==vTarget.sCTNode and DB.getValue(n, "TypeAttack", "")==sTypeAttack and DB.getValue(n, "TypeResult", "")=="Attack" then
							sRollResult=combat.tResultsAbr[DB.getValue(n, "RollResult", "")];
							nodeSourceRoll=n;
							break;
						end
					end
					for _,n in pairs(DB.getChildren(vTarget.sCTNode..".rolls")) do
						if DB.getValue(n, "TargetCTNode", "")==rSource.sCTNode and DB.getValue(n, "TypeAttack", "")==sTypeAttack and DB.getValue(n, "TypeResult", "")=="Defense" then
							nodeTargetRoll=n;
							break;
						end
					end
					if nodeSourceRoll then
						RulesetWizard.deleteDBNodeOOB(nodeSourceRoll);
					end
					if nodeTargetRoll then
						RulesetWizard.deleteDBNodeOOB(nodeTargetRoll);
					end
					rRolls[iRoll]={nBonuses=rRoll.nBonuses, aDice=rRoll.aDice, nMod=rRoll.nMod, sType=rRoll.sType, sDesc=rRoll.sDesc, nDamageMult=rRoll.nDamageMult, nTarget = iRoll }; -- nTarget = iRoll: Save the index of the target for later use
					if combat.tResults[sRollResult] then
						if combat.tResults[sRollResult].nExtraD6&gt;0 then
							if type(rRolls[iRoll].aDice)=="string" then
								rRolls[iRoll].aDice=combat.tResults[sRollResult].nExtraD6.."d6+"..rRolls[iRoll].aDice;
							else
								for i=1,combat.tResults[sRollResult].nExtraD6 do
									rRolls[iRoll].aDice[#rRolls[iRoll].aDice+1]={type="d6"};
								end
								rRolls[iRoll].aDice.expr=combat.tResults[sRollResult].nExtraD6.."d6+"..rRolls[iRoll].aDice.expr;
							end
							rRolls[iRoll].sDesc=rRolls[iRoll].sDesc.." [EXTRA DAMAGE: +"..combat.tResults[sRollResult].nExtraD6.."d6]";
						end
						rRolls[iRoll].nDamageMult=combat.tResults[sRollResult].nDamageMult;
						if rRolls[iRoll].nDamageMult&gt;1 then
							rRolls[iRoll].sDesc=rRolls[iRoll].sDesc.." [CRITICAL DAMAGE: x"..combat.tResults[sRollResult].nDamageMult.."]";
						end
					else
--						Debug.chat(sRollResult);
						rRolls[iRoll] = rRoll;
					end
				else
					rRolls[iRoll] = rRoll;
--					Debug.chat("Sin sTypeAttack", rRoll.sDesc, rRoll.sDesc:match("%[(.-) DAMAGE%]"));
				end
			end
		end
	end
	return aTargeting;
end

function DamageResultHandler(rSource, rTarget, rRoll)
	if not rRoll then
		return;
	end
	local nDamageMult=1;
	if rRoll.nDamageMult then
		nDamageMult=tonumber(rRoll.nDamageMult);
	end
	local rMessage;
	if rSource then
		rMessage=ActionsManager.createActionMessage(rSource, rRoll);
		Comm.deliverChatMessage(rMessage);
	end
    rMessage=ChatManager.createBaseMessage();
    rMessage.icon = "roll_damage";
    local sTarget="";
	local sArmorType="";
	local nArmorReduction=0;
	local nDamage=ActionsManager.total(rRoll);
	if rRoll.sDesc:match("vs Kinetic") then
		sArmorType=" vs Kinetic";
	elseif rRoll.sDesc:match("vs Energy") then
		sArmorType=" vs Energy";
	end
	
    if rTarget and rTarget.sCTNode then
		local nWoundThreshold=DB.getValue(rTarget.sCTNode..".Health.Physical.WoundThreshold");
		sTarget=" -&gt; to "..Tools.getName(rTarget.sCTNode);
		if rRoll.sDesc:match("vs Kinetic") then
			nArmorReduction=DB.getValue(rTarget.sCTNode..".Armor.KineticAV", 0);
		elseif rRoll.sDesc:match("vs Energy") then
			nArmorReduction=DB.getValue(rTarget.sCTNode..".Armor.EnergyAV", 0);
		end
		
		local sHalfArmor="";
		if rRoll.sDesc:match("%[Armor%-Piercing%]") then
			nArmorReduction=Tools.RoundNumber(nArmorReduction/2);
			sHalfArmor=" (H)";
		end
		
		if nArmorReduction&gt;0 then
			sTarget=sTarget.." [Armor Reduction: "..math.min(nArmorReduction, ActionsManager.total(rRoll))..sHalfArmor.."]";
			nDamage=math.max(ActionsManager.total(rRoll)*nDamageMult-nArmorReduction, 0);
		end
		
		local nTotalDamageTaken=DB.getValue(rTarget.sCTNode..".Health.Physical.DamageTaken", 0)+nDamage;
		RulesetWizard.changeDBValueOOB(rTarget.sCTNode..".Health.Physical.DamageTaken", nTotalDamageTaken);
--		DB.setValue(rTarget.sCTNode..".Health.Physical.DamageTaken", "number", nTotalDamageTaken);
		
		if nDamage&gt;=nWoundThreshold then
			local nWounds=math.floor(nDamage/nWoundThreshold);
			sTarget=sTarget.." [WOUNDS: "..nWounds.."]";
			RulesetWizard.changeDBValueOOB(rTarget.sCTNode..".Health.Physical.WoundsTaken", DB.getValue(rTarget.sCTNode..".Health.Physical.WoundsTaken")+nWounds);
--			DB.setValue(rTarget.sCTNode..".Health.Physical.WoundsTaken", "number", DB.getValue(rTarget.sCTNode..".Health.Physical.WoundsTaken")+nWounds);
		end
		
		if nTotalDamageTaken&gt;=DB.getValue(rTarget.sCTNode..".Health.Physical.DeathRating") then
			sTarget=sTarget.." [STATUS: Death/Destroyed]";
		elseif nTotalDamageTaken&gt;=DB.getValue(rTarget.sCTNode..".Health.Physical.Durability") then
			sTarget=sTarget.." [STATUS: Unconscious/Disabled]";
		end
    end
    
    rMessage.text = "Damage"..sArmorType.." ["..nDamage.."]"..sTarget;
	Comm.deliverChatMessage(rMessage);
end

function HitChanceHandler(rSource, rTarget, rRoll)
    if rSource and rTarget and rSource.sCTNode and rTarget.sCTNode and rRoll then
		local rMessage=ActionsManager.createActionMessage(rSource, rRoll);
		if ActionsManager.total(rRoll)&lt;50  then
			rMessage.icon = "roll_attack_hit";
			Comm.deliverChatMessage(rMessage);
			if Session.IsHost then
				combat.AddAttack(rSource.sCTNode, rTarget.sCTNode, rRoll.sTypeAttack, rRoll.sTypeResult, rRoll.sResult, rRoll.nRollTotal, rRoll.nTarget, false, 100);
			else
				local msgOOB={};
				msgOOB.type=combat.OOB_ADD_ATTACK;
				msgOOB.sSourceCTNode=rSource.sCTNode;
				msgOOB.sTargetCTNode=rTarget.sCTNode;
				msgOOB.sTypeAttack=rRoll.sTypeAttack;
				msgOOB.sTypeResult=rRoll.sTypeResult;
				msgOOB.sResult=rRoll.sResult;
				msgOOB.nRollTotal=rRoll.nRollTotal;
				msgOOB.nTarget=rRoll.nTarget;
				msgOOB.bModifiedRoll="false";
				msgOOB.nPerc=100;
				Comm.deliverOOBMessage(msgOOB);
			end
		else
			rMessage.icon = "roll_attack_miss";
			Comm.deliverChatMessage(rMessage);
		end
    end
end

function StressTestTargetingHandler(rSource, aTargeting, rRolls)
	local rRoll={nBonuses=rRolls[1].nBonuses, aDice=rRolls[1].aDice, nMod=rRolls[1].nMod, sType=rRolls[1].sType, sDesc=rRolls[1].sDesc};
	local iRoll = 0;
	local nRollTarget;
	if aTargeting and rSource then
		for _,vTargetGroup in ipairs(aTargeting) do
			for _,vTarget in ipairs(vTargetGroup) do
				iRoll=iRoll+1;
				local sClass, sRecord=DB.getValue(vTarget.sCTNode..".link");
				if sClass=="npc" then
					nRollTarget=DB.getValue(vTarget.sCTNode..".Aptitudes.Checks.WillpowerCheck", 0);
				else
					nRollTarget=DB.getValue(sRecord..".Aptitudes.Checks.WillpowerCheck", 0);
				end
				rRolls[iRoll]={nBonuses=rRoll.nBonuses, aDice=rRoll.aDice, nMod=rRoll.nMod, sType=rRoll.sType, sDesc="[STRESS TEST] Willpower vs "..(nRollTarget or 0), sTarget=nRollTarget, nTarget = iRoll }; -- nTarget = iRoll: Save the index of the target for later use
			end
		end
	end
	return aTargeting;
end

function StressTestResultHandler(rSource, rTarget, rRoll)
	local sResult, nTarget=CheckHandler(rTarget, rSource, rRoll);
    if rSource and rTarget and rSource.sCTNode and rTarget.sCTNode then
		combat.AddStressTestResult(rSource.sCTNode, rTarget.sCTNode, sResult, ActionsManager.total(rRoll), nTarget, false);
	end
end

function StressDamageTargetingHandler(rSource, aTargeting, rRolls)
	if not rRolls[1].sSV or rRolls[1].sSV=="" then
		return nil;
	end
	local rRoll={nBonuses=rRolls[1].nBonuses, aDice=rRolls[1].aDice, nMod=rRolls[1].nMod, sType=rRolls[1].sType, sDesc=rRolls[1].sDesc};
	local iRoll = 0;
	local sSV_failure="0";
	local sSV_success="0";
	local bStressTestSuccess;
	if rRolls[1].sSV:match(".*/.*") then
		sSV_failure, sSV_success=rRolls[1].sSV:match("(.*)/(.*)");
	else
		sSV_failure=rRolls[1].sSV;
	end
	local aSV_failure, nMod_failure=StringManager.convertStringToDice(sSV_failure);
	local aSV_success, nMod_success=StringManager.convertStringToDice(sSV_success);
	if aTargeting and rSource then
		for _,vTargetGroup in ipairs(aTargeting) do
			for _,vTarget in ipairs(vTargetGroup) do
				bStressTestSuccess=false;
				iRoll=iRoll+1;
				if vTarget.sCTNode then
					for _,n in pairs(DB.getChildren(vTarget.sCTNode..".rolls")) do
						if DB.getValue(n, "TargetCTNode", "")==rSource.sCTNode then
							bStressTestSuccess=combat.tResults[combat.tResultsAbr[DB.getValue(n, "RollResult", "")]].nRange&gt;0;
							break;
						end
					end
					if bStressTestSuccess then
						rRolls[iRoll]={nBonuses=rRoll.nBonuses, aDice=aSV_success, nMod=nMod_success, sType=rRoll.sType, sDesc=rRoll.sDesc, nTarget = iRoll }; -- nTarget = iRoll: Save the index of the target for later use
					else
						rRolls[iRoll]={nBonuses=rRoll.nBonuses, aDice=aSV_failure, nMod=nMod_failure, sType=rRoll.sType, sDesc=rRoll.sDesc, nTarget = iRoll }; -- nTarget = iRoll: Save the index of the target for later use
					end
				else
					rRolls[iRoll]={nBonuses=rRoll.nBonuses, aDice=aSV_failure, nMod=nMod_failure, sType=rRoll.sType, sDesc=rRoll.sDesc, nTarget = iRoll }; -- nTarget = iRoll: Save the index of the target for later use
				end
			end
		end
	end
	
	return aTargeting;
end

function StressDamageResultHandler(rSource, rTarget, rRoll)
	if rSource then
		rMessage=ActionsManager.createActionMessage(rSource, rRoll);
		Comm.deliverChatMessage(rMessage);
	end	
end</Script>
    <RegisterScript>true</RegisterScript>
    <Encoding />
  </Scripts>
</DocumentElement>