<DocumentElement xmlns="http://tempuri.org/Ruleset.xsd">
  <Scripts>
    <ScriptName>RollHandlers</ScriptName>
    <FolderID>24</FolderID>
    <Script>OOB_ADD_ATTACK="OOB_ADD_ATTACK";
OOB_ADD_SLEIGHT_ATTACK="OOB_ADD_SLEIGHT_ATTACK";

function onInit()
	OOBManager.registerOOBMsgHandler(OOB_ADD_ATTACK, OOBAddAttack);
	OOBManager.registerOOBMsgHandler(OOB_ADD_SLEIGHT_ATTACK, OOBAddSleightAttack);
end

function RollResultFrom0to99(rRoll)
	for i=1,#rRoll.aDice do
		rRoll.aDice[i].value=rRoll.aDice[i].value%100;
		rRoll.aDice[i].result=rRoll.aDice[i].result%100;
	end
	rRoll.aDice.total=rRoll.aDice.total%100;
	rRoll.nTotal=rRoll.nTotal%100;
	return rRoll;
end

function CheckHandler(rSource, rTarget, rRoll)
	rRoll=RollResultFrom0to99(rRoll)
	local nMod=rRoll.nMod;
	rRoll.nMod=0;
    local rMessage;
    if rRoll.sType=="DefenseCheck" or rRoll.sType=="DefenseSleightCheck" then
		rMessage = ActionsManager.createActionMessage(rTarget, rRoll);
	else
		rMessage = ActionsManager.createActionMessage(rSource, rRoll);
	end
	local nTarget=tonumber(rMessage.text:match("%(vs (%-*%d+)%)"));
	local sTarget=""..nTarget;
	if nTarget&lt;0 then
		sTarget="%"..sTarget;
	end
	rMessage.text=rMessage.text:gsub("vs "..sTarget, "vs "..math.max(0,nTarget+nMod));
	nTarget=nTarget+nMod;

	local nTotal = ActionsManager.total(rRoll);
	rMessage.text=rMessage.text.." ["..RollChecks.RollCheck(nTotal, nTarget):upper().."]";
	Comm.deliverChatMessage(rMessage);
	return RollChecks.RollCheck(nTotal, nTarget):upper();
end

function OOBAddAttack(msgOOB)
	if Session.IsHost then
		AddAttack(msgOOB.sSourceCTNode, msgOOB.sTargetCTNode, msgOOB.sTypeAttack, msgOOB.sTypeResult, msgOOB.sResult, msgOOB.nRollTotal);
	end
end

function AddAttack(sSourceCTNode, sTargetCTNode, sTypeAttack, sTypeResult, sResult, nRollTotal)
	if Session.IsHost and sSourceCTNode and sTargetCTNode and sTypeAttack and sTypeResult and sResult and nRollTotal then
		if not combat.tAttacts[sSourceCTNode] then
			combat.tAttacts[sSourceCTNode]={};
		end
		if not combat.tAttacts[sSourceCTNode][sTargetCTNode] then
			combat.tAttacts[sSourceCTNode][sTargetCTNode]={};
		end
		if not combat.tAttacts[sSourceCTNode][sTargetCTNode][sTypeAttack] then
			combat.tAttacts[sSourceCTNode][sTargetCTNode][sTypeAttack]={};
		end
		combat.tAttacts[sSourceCTNode][sTargetCTNode][sTypeAttack]["s"..sTypeResult.."Result"]=sResult;
		combat.tAttacts[sSourceCTNode][sTargetCTNode][sTypeAttack]["n"..sTypeResult.."Result"]=nRollTotal;
		if combat.ResolveCombat(sSourceCTNode, sTargetCTNode, sTypeAttack) and OptionsManager.isOption("AUTODEFENSEROLL", "on") then
			GameSystem.actions["DefenseCheck"] = { bUseModStack = "true", sIcon = "action_attack", sTargeting = "all" }
			ActionsManager.registerResultHandler("DefenseCheck", CombatHandler);
			local sSkill, nDefenseTarget = Tools.getDefenderSkillAndTarget(sTargetCTNode, sTypeAttack);
			local aDice2, nMod2 = StringManager.convertStringToDice("1d100");
			local rRoll = { sType = "DefenseCheck", sDesc = "["..sTypeAttack.." DEFENSE] "..sSkill.." (vs "..nDefenseTarget..")", aDice = aDice2, nMod = nMod2};
			local rTargetNode=DB.findNode(sTargetCTNode);
			local tTargetGroups=ActionsManager.getTargeting(rTargetNode, DB.findNode(sSourceCTNode), rRoll.sType, { rRoll });
			ActionsManager.actionRoll(rTargetNode, tTargetGroups, { rRoll });
		end
	end
end

function CombatHandler(rSource, rTarget, rRoll)
	local sTypeResult="";
	if rRoll then
		if rRoll.sType=="DefenseCheck" then
			local rAux=rSource;
			rSource=rTarget;
			rTarget=rAux;
			sTypeResult="Defense";
		elseif rRoll.sType=="AttackCheck" then
			sTypeResult="Attack";
		end
	end
    local sResult=CheckHandler(rSource, rTarget, rRoll);
	local sTypeAttack="";
    if rSource and rTarget and rSource.sCTNode and rTarget.sCTNode then
        if rRoll.sDesc:match("MELEE") then
			sTypeAttack="MELEE";
		else
			sTypeAttack="RANGED";
		end
		if Session.IsHost then
			AddAttack(rSource.sCTNode, rTarget.sCTNode, sTypeAttack, sTypeResult, sResult, ActionsManager.total(rRoll));
		else
			local msgOOB={};
			msgOOB.type=OOB_ADD_ATTACK;
			msgOOB.sSourceCTNode=rSource.sCTNode;
			msgOOB.sTargetCTNode=rTarget.sCTNode;
			msgOOB.sTypeAttack=sTypeAttack;
			msgOOB.sTypeResult=sTypeResult;
			msgOOB.sResult=sResult;
			msgOOB.nRollTotal=ActionsManager.total(rRoll);
			Comm.deliverOOBMessage(msgOOB);
		end
    end
end

function InitHandler(rSource, rTarget, rRoll)
    local rMessage = ActionsManager.createActionMessage(rSource, rRoll);
    Comm.deliverChatMessage(rMessage);    

    if (rSource) then
        local nTotal = ActionsManager.total(rRoll);
        rCreature = DB.findNode(rSource.sCreatureNode);
        DB.setValue(rCreature, "initresult", "number", nTotal);
    end
end

function OOBAddSleightAttack(msgOOB)
	if Session.IsHost then
		AddSleightAttack(msgOOB.sSourceCTNode, msgOOB.sTargetCTNode, msgOOB.sTypeResult, msgOOB.sResult, msgOOB.nRollTotal);
	end
end

function AddSleightAttack(sSourceCTNode, sTargetCTNode, sTypeResult, sResult, nRollTotal)
	if Session.IsHost and sSourceCTNode and sTargetCTNode and sTypeResult and sResult and nRollTotal then
		if not combat.tAttacts[sSourceCTNode] then
			combat.tAttacts[sSourceCTNode]={};
		end
		if not combat.tAttacts[sSourceCTNode][sTargetCTNode] then
			combat.tAttacts[sSourceCTNode][sTargetCTNode]={};
		end
		combat.tAttacts[sSourceCTNode][sTargetCTNode]["s"..sTypeResult.."Result"]=sResult;
		combat.tAttacts[sSourceCTNode][sTargetCTNode]["n"..sTypeResult.."Result"]=nRollTotal;
		if combat.ResolveSleightAttack(sSourceCTNode, sTargetCTNode, sTypeAttack) then
			GameSystem.actions["DefenseSleightCheck"] = { bUseModStack = "true", sIcon = "action_attack", sTargeting = "all" }
			ActionsManager.registerResultHandler("DefenseSleightCheck", SleightHandler);
			local nDefenseTarget = Tools.getDefenderWillTarget(sTargetCTNode);
			local aDice2, nMod2 = StringManager.convertStringToDice("1d100");
			local rRoll = { sType = "DefenseSleightCheck", sDesc = "[SLEIGHT DEFENSE] Willpower (vs "..nDefenseTarget..")", aDice = aDice2, nMod = nMod2};
			local rTargetNode=DB.findNode(sTargetCTNode);
			local tTargetGroups=ActionsManager.getTargeting(rTargetNode, DB.findNode(sSourceCTNode), rRoll.sType, { rRoll });
			ActionsManager.actionRoll(rTargetNode, tTargetGroups, { rRoll });
		end
	end
end

function SleightHandler(rSource, rTarget, rRoll)
 	local sTypeResult="";
	if rRoll then
		if rRoll.sType=="DefenseSleightCheck" then
			local rAux=rSource;
			rSource=rTarget;
			rTarget=rAux;
			sTypeResult="Defense";
		elseif rRoll.sType=="AttackSleightCheck" then
			sTypeResult="Attack";
		end
	end
	local sResult=CheckHandler(rSource, rTarget, rRoll);
    if rSource and rTarget and rSource.sCTNode and rTarget.sCTNode then
		if Session.IsHost then
			AddSleightAttack(rSource.sCTNode, rTarget.sCTNode, sTypeResult, sResult, ActionsManager.total(rRoll));
		else
			local msgOOB={};
			msgOOB.type=OOB_ADD_SLEIGHT_ATTACK;
			msgOOB.sSourceCTNode=rSource.sCTNode;
			msgOOB.sTargetCTNode=rTarget.sCTNode;
			msgOOB.sTypeResult=sTypeResult;
			msgOOB.sResult=sResult;
			msgOOB.nRollTotal=ActionsManager.total(rRoll);
			Comm.deliverOOBMessage(msgOOB);
		end
    end
 end





































</Script>
    <RegisterScript>true</RegisterScript>
    <Encoding />
  </Scripts>
</DocumentElement>