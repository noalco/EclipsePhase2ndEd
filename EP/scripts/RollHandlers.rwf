<DocumentElement xmlns="http://tempuri.org/Ruleset.xsd">
  <Scripts>
    <ScriptName>RollHandlers</ScriptName>
    <FolderID>24</FolderID>
    <Script>function RollResultFrom0to99(rRoll)
	if rRoll and rRoll.aDice and rRoll.nTotal then
		for i=1,#rRoll.aDice do
			rRoll.aDice[i].value=rRoll.aDice[i].value%100;
			rRoll.aDice[i].result=rRoll.aDice[i].result%100;
		end
		rRoll.aDice.total=rRoll.aDice.total%100;
		rRoll.nTotal=rRoll.nTotal%100;
	else
		rRoll.nTotal=rRoll.nMod;
		rRoll.aDice["total"]=rRoll.nMod;
		rRoll.aDice["expr"]="d100";
		rRoll.aDice[1]={};
		rRoll.aDice[1]["value"]=rRoll.nMod;
		rRoll.aDice[1]["type"]="d100";
		rRoll.aDice[1]["result"]=rRoll.nMod;	
--		{ s'nBonuses' = s'0', 
--		s'aDice' = { #1 = { s'value' = #85, s'type' = s'd100', s'result' = #85 }, s'expr' = s'1d100', s'total' = #85 }, 
--		s'nMod' = #0, 
--		s'sType' = s'AttackCheck', 
--		s'bSecret' = bFALSE, 
--		s'nTotal' = #85, 
--		s'sDesc' = s'[MELEE ATTACK] Melee (vs 65)' }

--		{ s'aDice' = {  }, s'nMod' = #85, s'sType' = s'AttackCheck', s'sDesc' = s'[MELEE ATTACK] Melee (vs 65) [FAILURE]', s'bSecret' = bFALSE }
		rRoll.sDesc=rRoll.sDesc:gsub(" %[CRITICAL FAILURE%]", "");
		rRoll.sDesc=rRoll.sDesc:gsub(" %[TWO SUPERIOR FAILURES%]", "");
		rRoll.sDesc=rRoll.sDesc:gsub(" %[ONE SUPERIOR FAILURE%]", "");
		rRoll.sDesc=rRoll.sDesc:gsub(" %[FAILURE%]", "");
		rRoll.sDesc=rRoll.sDesc:gsub(" %[CRITICAL SUCCESS%]", "");
		rRoll.sDesc=rRoll.sDesc:gsub(" %[TWO SUPERIOR SUCCESSES%]", "");
		rRoll.sDesc=rRoll.sDesc:gsub(" %[ONE SUPERIOR SUCCESS%]", "");
		rRoll.sDesc=rRoll.sDesc:gsub(" %[SUCCESS%]", "");

		rRoll.nMod=0;
	end
	return rRoll;
end

function CheckHandler(rSource, rTarget, rRoll)
	rRoll=RollResultFrom0to99(rRoll)
	local nMod=rRoll.nMod;
	rRoll.nMod=0;
    local rMessage;
    if rRoll.sType=="DefenseCheck" or rRoll.sType=="DefenseSleightCheck" then
		rMessage = ActionsManager.createActionMessage(rTarget, rRoll);
	else
		rMessage = ActionsManager.createActionMessage(rSource, rRoll);
	end
	local nTarget=tonumber(rMessage.text:match("%(vs (%-*%d+)%)"));
	local sTarget=""..nTarget;
	if nTarget&lt;0 then
		sTarget="%"..sTarget;
	end
	rMessage.text=rMessage.text:gsub("vs "..sTarget, "vs "..math.max(0,nTarget+nMod));
	nTarget=nTarget+nMod;

	local nTotal = ActionsManager.total(rRoll);
	rMessage.text=rMessage.text.." ["..RollChecks.RollCheck(nTotal, nTarget):upper().."]";
	Comm.deliverChatMessage(rMessage);
	return RollChecks.RollCheck(nTotal, nTarget):upper(), nTarget;
end

function CombatHandler(rSource, rTarget, rRoll)
	local sTypeResult="";
	local sTypeAttack="";
	if rRoll.sDesc:match("MELEE") then
		sTypeAttack="MELEE";
	else
		sTypeAttack="RANGED";
	end
	
	if rRoll and rSource and rTarget and rSource.sCTNode and rTarget.sCTNode and sTypeAttack=="MELEE" then
		local sSize=DB.getValue(rSource.sCTNode..".Size");
		if not sSize or sSize=="" then
			sSize="Medium Size";
		end
		local nSourceSize=DataCommon.tReach[sSize];
		
		sSize=DB.getValue(rTarget.sCTNode..".Size");
		if not sSize or sSize=="" then
			sSize="Medium Size";
		end
		local nTargetSize=DataCommon.tReach[sSize];
		
		if nSourceSize&gt;nTargetSize then
			rRoll.nMod=rRoll.nMod+math.min((nSourceSize-nTargetSize)*10, 30);
			rRoll.sDesc=rRoll.sDesc.." [REACH: +"..math.min((nSourceSize-nTargetSize)*10, 30).."]";
		end
	end
	
	if rRoll then
		if rRoll.sType=="DefenseCheck" then
			local rAux=rSource;
			rSource=rTarget;
			rTarget=rAux;
			sTypeResult="Defense";
		elseif rRoll.sType=="AttackCheck" then
			sTypeResult="Attack";
		end
	end
    local sResult, nTarget=CheckHandler(rSource, rTarget, rRoll);
    if rSource and rTarget and rSource.sCTNode and rTarget.sCTNode then
		if Session.IsHost then
			combat.AddAttack(rSource.sCTNode, rTarget.sCTNode, sTypeAttack, sTypeResult, sResult, ActionsManager.total(rRoll), nTarget);
		else
			local msgOOB={};
			msgOOB.type=combat.OOB_ADD_ATTACK;
			msgOOB.sSourceCTNode=rSource.sCTNode;
			msgOOB.sTargetCTNode=rTarget.sCTNode;
			msgOOB.sTypeAttack=sTypeAttack;
			msgOOB.sTypeResult=sTypeResult;
			msgOOB.sResult=sResult;
			msgOOB.nRollTotal=ActionsManager.total(rRoll);
			msgOOB.nTarget=nTarget;
			Comm.deliverOOBMessage(msgOOB);
		end
    end
end

function InitHandler(rSource, rTarget, rRoll)
    local rMessage = ActionsManager.createActionMessage(rSource, rRoll);
    Comm.deliverChatMessage(rMessage);    

    if (rSource) then
        local nTotal = ActionsManager.total(rRoll);
        rCreature = DB.findNode(rSource.sCTNode);
        if rCreature then
			if Session.IsHost then
				DB.setValue(rCreature, "initresult", "number", nTotal);
			else
				RulesetWizard.changeDBValueOOB(DB.getChild(rCreature, "initresult"), nTotal);
			end
		end
    end
end

function TargetingSleightHandler(rSource, aTargeting, rRolls)
	if aTargeting and rSource then
		local rMessage = ChatManager.createBaseMessage(rSource);
		rMessage.icon = "roll_cast";
		for _,vTargetGroup in ipairs(aTargeting) do
			for _,vTarget in ipairs(vTargetGroup) do
				rMessage.text = "["..Interface.getString("sleight_cast").."] "..(rRolls[1].sleight or "nonono").." [at "..Tools.getName(vTarget.sCTNode).."]";
				Comm.deliverChatMessage(rMessage);
			end
		end
	end
	return aTargeting;
end

function SleightHandler(rSource, rTarget, rRoll)
 	local sTypeResult="";
	if rRoll then
		if rRoll.sType=="DefenseSleightCheck" then
			local rAux=rSource;
			rSource=rTarget;
			rTarget=rAux;
			sTypeResult="Defense";
		elseif rRoll.sType=="AttackSleightCheck" then
			sTypeResult="Attack";
		end
	end
	local sResult=CheckHandler(rSource, rTarget, rRoll);
    if rSource and rTarget and rSource.sCTNode and rTarget.sCTNode then
		if Session.IsHost then
			combat.AddSleightAttack(rSource.sCTNode, rTarget.sCTNode, sTypeResult, sResult, ActionsManager.total(rRoll));
		else
			local msgOOB={};
			msgOOB.type=combat.OOB_ADD_SLEIGHT_ATTACK;
			msgOOB.sSourceCTNode=rSource.sCTNode;
			msgOOB.sTargetCTNode=rTarget.sCTNode;
			msgOOB.sTypeResult=sTypeResult;
			msgOOB.sResult=sResult;
			msgOOB.nRollTotal=ActionsManager.total(rRoll);
			Comm.deliverOOBMessage(msgOOB);
		end
    end
 end





































</Script>
    <RegisterScript>true</RegisterScript>
    <Encoding />
  </Scripts>
</DocumentElement>