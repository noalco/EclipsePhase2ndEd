<DocumentElement xmlns="http://tempuri.org/Ruleset.xsd">
  <Scripts>
    <ScriptName>Tools</ScriptName>
    <FolderID>26</FolderID>
    <Script>function RoundNumber(nNumber)
	return nNumber % 1 &gt;= 0.5 and math.ceil(nNumber) or math.floor(nNumber);
end

function ChatMenssage(sMenssage, sFont, sIcon, bDMOnly, sUser)
	if not sFont then sFont="msgfont"; end;
	local msg = {font = sFont, icon = sIcon, secret = bDMOnly};
	msg.text = sMenssage;
	if sUser then
		if sUser == "" then
			Comm.deliverChatMessage(msg);
		else
			Comm.deliverChatMessage(msg, sUser);
		end
	elseif bDMOnly then
		msg.secret = true;
		if Session.IsHost then
			Comm.deliverChatMessage(msg);
		else
			--Debug.chat("not sUser bDMOnly not Session.IsHost");
			Comm.deliverChatMessage(msg, User.getUsername());
		end
	else
		Comm.deliverChatMessage(msg);
	end
	--Comm.deliverChatMessage(msg);
end

function getCharNodePath(Node)
	if Node and DB.getPath(Node):match("(charsheet%.id%-%d*)") then
		return DB.getPath(Node):match("(charsheet%.id%-%d*)");
	else
		return "";
	end
end

function getCharNode(Node)
	return DB.findNode(getCharNodePath(Node));
end

function SearchRecord(sRecordName, sReference, sExtraField, ExtraFieldValue)
	local sRecordNodeName;
	local dataNode;
	if sRecordName and sRecordName~="" and sReference and sReference~="" then
		sRecordName=sRecordName:lower();
		sRecordName=sRecordName:gsub("%-", " ");
		sRecordName=sRecordName:gsub("%+", " ");
		
		-- Local search
		dataNode=DB.getChild(".reference."..sReference);
		if dataNode then
			for _,rReferenceNode in pairs(DB.getChildren(dataNode)) do
				sRecordNodeName=DB.getValue(rReferenceNode, "name", ""):lower();
				sRecordNodeName=sRecordNodeName:gsub("%-", " ");
				if sRecordNodeName:match(sRecordName) then
					if sExtraField and ExtraFieldValue and sExtraField~="" then
						if DB.getValue(rReferenceNode, sExtraField)==ExtraFieldValue then
							return rReferenceNode;
						end
					else
						return rReferenceNode;
					end
				end
			end
		end

		-- Module search
		for sModule,rModule in pairs(ModuleManager.getAllModuleInfo()) do
			dataNode=DB.getChild(".reference."..sReference.."@"..sModule)
			if rModule.loaded and dataNode then
				for _,rReferenceNode in pairs(DB.getChildren(dataNode)) do
					sRecordNodeName=DB.getValue(rReferenceNode, "name", ""):lower();
					sRecordNodeName=sRecordNodeName:gsub("%-", " ");
					if sRecordNodeName:match(sRecordName) then
						if sExtraField and ExtraFieldValue and sExtraField~="" then
							if DB.getValue(rReferenceNode, sExtraField)==ExtraFieldValue then
								return rReferenceNode;
							end
						else
							return rReferenceNode;
						end
					end
				end
			end;
		end
	end
	return "";
end

function getName(sPath)
	if sPath and sPath~="" then
		return DB.getValue(sPath..".name", "");
	else
		return "";
	end
end

function CopyTable(rTable)
	local rTable2={};
	if rTable then
		for k, v in pairs(rTable) do
			rTable2[k] = v;
		end
	end
	return rTable2;
end

function getDefenderSkillAndTarget(sCreatureNode, sAttackType)
	if sCreatureNode and sAttackType then
		local sClass, sRecord=DB.getValue(sCreatureNode..".link");
		local CreatureNode;
		if sClass=="npc" then
			CreatureNode=DB.findNode(sCreatureNode);
		else
			CreatureNode=DB.findNode(sRecord);
		end
		if sAttackType=="MELEE" then
			if DB.getValue(CreatureNode, "Combat.Melee", 0)&gt;=DB.getValue(CreatureNode, "Combat.Fray", 0) then
				return "Melee", DB.getValue(CreatureNode, "Combat.Melee", 0);
			else
				return "Fray", DB.getValue(CreatureNode, "Combat.Fray", 0);
			end
		elseif sAttackType=="RANGED" then
			return "Fray/2", DB.getValue(CreatureNode, "Combat.Fray2", 0);
		else
			return nil, nil;
		end
	else
		return nil, nil;
	end
end

function getDefenderWillTarget(sCreatureNode)
	if sCreatureNode then
		local sClass, sRecord=DB.getValue(sCreatureNode..".link");
		local CreatureNode;
		if sClass=="npc" then
			CreatureNode=DB.findNode(sCreatureNode);
		else
			CreatureNode=DB.findNode(sRecord);
		end
		return DB.getValue(CreatureNode, "Aptitudes.Checks.WillpowerCheck", 0);
	end
end

function sortListToString(DBNode, subPath, sDBField, default, sDBSubFieldName, sSubFieldLabel)
	local sList="";
	local sSep="";
	local value=default;
	local SubValue;
	local tTable={};
	local sortedChildren=DB.getChildren(DBNode, subPath);
	if sortedChildren then
		for _,c in pairs(sortedChildren) do
			value=DB.getValue(c, sDBField, default);
			if value~=default then
				if sDBSubFieldName and sSubFieldLabel then
					SubValue=DB.getValue(c, sDBSubFieldName);
					if SubValue then
						if value:match("%)") then
							value=value:gsub("%)", ", "..sSubFieldLabel.." "..SubValue..")")
						else
							value=value.." ("..sSubFieldLabel.." "..SubValue..")";
						end
						table.insert(tTable, value);
					else
						table.insert(tTable, value);
					end
				else
					table.insert(tTable, value);
				end
			end
		end
	end
	table.sort(tTable);
	for _,v in pairs(tTable) do
		sList=sList..sSep..v;
		sSep=", ";
	end
	return sList;
end</Script>
    <RegisterScript>true</RegisterScript>
    <Encoding />
  </Scripts>
</DocumentElement>