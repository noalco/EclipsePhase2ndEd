<DocumentElement xmlns="http://tempuri.org/Ruleset.xsd">
  <Scripts>
    <ScriptName>combat</ScriptName>
    <FolderID>13</FolderID>
    <Script>OOB_ADD_ATTACK="OOB_ADD_ATTACK";
OOB_ADD_SLEIGHT_ATTACK="OOB_ADD_SLEIGHT_ATTACK";

function onInit()
	OOBManager.registerOOBMsgHandler(OOB_ADD_ATTACK, OOBAddAttack);
	OOBManager.registerOOBMsgHandler(OOB_ADD_SLEIGHT_ATTACK, OOBAddSleightAttack);
	DB.addHandler("combattracker.list.*.active", "onUpdate", CleanRolls);
	CleanRolls();
end

function CleanRolls()
	for _,n in pairs(DB.getChildren("combattracker.list")) do
		DB.deleteChildren(n, "rolls");
	end
end

tResults = {
	["CRITICAL SUCCESS"]= {nRange=4, nExtraD6=0, nDamageMult=2, sAbr="CS"},
	["TWO SUPERIOR SUCCESSES"]= {nRange=3, nExtraD6=2, nDamageMult=1, sAbr="2SS"},
	["ONE SUPERIOR SUCCESS"]= {nRange=2, nExtraD6=1, nDamageMult=1, sAbr="1SS"},
	["SUCCESS"]= {nRange=1, nExtraD6=0, nDamageMult=1, sAbr="S"},
	["FAILURE"]= {nRange=-1, nExtraD6=0, nDamageMult=1, sAbr="F"},
	["ONE SUPERIOR FAILURE"]= {nRange=-2, nExtraD6=0, nDamageMult=1, sAbr="1SF"},
	["TWO SUPERIOR FAILURES"]= {nRange=-3, nExtraD6=0, nDamageMult=1, sAbr="2SF"},
	["CRITICAL FAILURE"]= {nRange=-4, nExtraD6=0, nDamageMult=1, sAbr="CF"},
}

tResultsAbr = {
	["CS"]="CRITICAL SUCCESS",
	["2SS"]="TWO SUPERIOR SUCCESSES",
	["1SS"]="ONE SUPERIOR SUCCESS",
	["S"]="SUCCESS",
	["F"]="FAILURE",
	["1SF"]="ONE SUPERIOR FAILURE",
	["2SF"]="TWO SUPERIOR FAILURES",
	["CF"]="CRITICAL FAILURE",
}

tAttacts = {} -- sAttackResult, sDefenseResult, nAttackResult, nDefenseResult
function ResolveCombat(sSourceCTNode, sTargetCTNode, sTypeAttack)
	if sSourceCTNode and sTargetCTNode and sTypeAttack then
		local bAttacker=tAttacts[sSourceCTNode] and tAttacts[sSourceCTNode][sTargetCTNode] and tAttacts[sSourceCTNode][sTargetCTNode][sTypeAttack] and tAttacts[sSourceCTNode][sTargetCTNode][sTypeAttack].sAttackResult;
		local bDefender=tAttacts[sSourceCTNode] and tAttacts[sSourceCTNode][sTargetCTNode] and tAttacts[sSourceCTNode][sTargetCTNode][sTypeAttack] and tAttacts[sSourceCTNode][sTargetCTNode][sTypeAttack].sDefenseResult;
		local sAttackerName="";
		local sDefenderName="";
		local rMessage;
		local sAttackResult="";
		local nAttackResult=0;
		local sDefenseResult="";
		local nDefenseResult=0;
		
		sAttackerName=Tools.getName(sSourceCTNode);
		sAttackResult=tAttacts[sSourceCTNode][sTargetCTNode][sTypeAttack].sAttackResult;
		nAttackResult=tAttacts[sSourceCTNode][sTargetCTNode][sTypeAttack].nAttackResult;
		rMessage = ChatManager.createBaseMessage(DB.findNode(sSourceCTNode));
		
		sDefenderName=Tools.getName(sTargetCTNode);
		sDefenseResult=tAttacts[sSourceCTNode][sTargetCTNode][sTypeAttack].sDefenseResult;
		nDefenseResult=tAttacts[sSourceCTNode][sTargetCTNode][sTypeAttack].nDefenseResult;
		
		if bAttacker and bDefender then -- There are both attacker and defender
			if tResults[sAttackResult].nRange&gt;0 then -- The atacker succeeds
				if tResults[sDefenseResult].nRange&lt;0 or -- The defender fails
				sAttackResult == "CRITICAL SUCCESS" and sDefenseResult ~= "CRITICAL SUCCESS" or -- The attacker succeeds with a critical success and the defender succeeds with a non critical success
				sAttackResult ~= "CRITICAL SUCCESS" and sDefenseResult ~= "CRITICAL SUCCESS" and nAttackResult&gt;nDefenseResult or -- Both attacker and defencer succeed with non critical success and attaker roll &gt; defender roll
				sAttackResult == "CRITICAL SUCCESS" and sDefenseResult == "CRITICAL SUCCESS" and nAttackResult&gt;nDefenseResult then -- Both attacker and defencer succeed with critical success and attaker roll &gt; defender roll
					-- The attacker wins the opposed test
					rMessage.text = sAttackerName.." vs "..sDefenderName..": "..Interface.getString("attack_hit");
					if sAttackResult=="CRITICAL SUCCESS" then
						rMessage.icon = "roll_attack_crit";
					else
						rMessage.icon = "roll_attack_hit";
					end				
				else
					-- The defender wins the opposed test
					rMessage.text = sAttackerName.." vs "..sDefenderName..": "..Interface.getString("attack_miss");
					rMessage.icon = "roll_attack_miss";
				end
				if tResults[sDefenseResult].nRange&gt;0 then
					rMessage.text = rMessage.text.." ("..nAttackResult.." vs "..nDefenseResult..")";
				end
			else -- The atacker fails
				rMessage.text = sAttackerName.." vs "..sDefenderName..": "..Interface.getString("attack_miss");
				rMessage.icon = "roll_attack_miss";
			end
			
			tAttacts[sSourceCTNode][sTargetCTNode][sTypeAttack]={};
			Comm.deliverChatMessage(rMessage);
			
--			AddCombatResult(sSourceCTNode, sTargetCTNode, sTypeAttack, sAttackResult);
		elseif bAttacker and tResults[sAttackResult].nRange&lt;0 then -- The atacker fails and there is no defence roll
			tAttacts[sSourceCTNode][sTargetCTNode][sTypeAttack]={};
			rMessage.text = sAttackerName.." vs "..sDefenderName..": "..Interface.getString("attack_miss");
			rMessage.icon = "roll_attack_miss";
			Comm.deliverChatMessage(rMessage);
		elseif bAttacker and tResults[sAttackResult].nRange&gt;0 then -- The atacker succeeds and there is no defence roll
			rMessage.text = sAttackerName.." vs "..sDefenderName..": "..Interface.getString("attack_possible_hit")..". "..sDefenderName.." "..Interface.getString(sTypeAttack:lower().."_defence_roll_required").." (vs "..nAttackResult..")";
			rMessage.icon = "roll_attack_possible_hit";
			Comm.deliverChatMessage(rMessage);
			return true;
		end
	end
	return false;
end

tSleightAttacks = {} -- sAttackResult, sDefenseResult, nAttackResult, nDefenseResult
function ResolveSleightAttack(sSourceCTNode, sTargetCTNode)
	if sSourceCTNode and sTargetCTNode then
		local bAttacker=tSleightAttacks[sSourceCTNode] and tSleightAttacks[sSourceCTNode][sTargetCTNode] and tSleightAttacks[sSourceCTNode][sTargetCTNode] and tSleightAttacks[sSourceCTNode][sTargetCTNode].sAttackResult;
		local bDefender=tSleightAttacks[sSourceCTNode] and tSleightAttacks[sSourceCTNode][sTargetCTNode] and tSleightAttacks[sSourceCTNode][sTargetCTNode] and tSleightAttacks[sSourceCTNode][sTargetCTNode].sDefenseResult;
		local sAttackerName="";
		local sDefenderName="";
		local rMessage;
		local sAttackResult="";
		local nAttackResult=0;
		local sDefenseResult="";
		local nDefenseResult=0;
		
		sAttackerName=Tools.getName(sSourceCTNode);
		sAttackResult=tSleightAttacks[sSourceCTNode][sTargetCTNode].sAttackResult;
		nAttackResult=tSleightAttacks[sSourceCTNode][sTargetCTNode].nAttackResult;
		rMessage = ChatManager.createBaseMessage(DB.findNode(sSourceCTNode));
		
		sDefenderName=Tools.getName(sTargetCTNode);
		sDefenseResult=tSleightAttacks[sSourceCTNode][sTargetCTNode].sDefenseResult;
		nDefenseResult=tSleightAttacks[sSourceCTNode][sTargetCTNode].nDefenseResult;

		if bAttacker and bDefender then -- There are both attacker and defender
			if tResults[sAttackResult].nRange&gt;0 then -- The atacker succeeds
				if sAttackResult == "CRITICAL SUCCESS" and sDefenseResult ~= "CRITICAL SUCCESS" or -- The attacker succeeds with a critical success and the defender succeeds with a non critical success
				sAttackResult == "CRITICAL SUCCESS" and sDefenseResult == "CRITICAL SUCCESS" and nAttackResult&gt;nDefenseResult then -- Both attacker and defencer succeed with critical success and attaker roll &gt; defender roll
					-- Critical success
					rMessage.text = sAttackerName.." vs "..sDefenderName..": "..Interface.getString("cast_atk_crit_hit");
					rMessage.icon = "roll_cast_crit_hit";
				elseif sAttackResult ~= "CRITICAL SUCCESS" and sDefenseResult == "CRITICAL SUCCESS" or -- The defender succeeds with a critical success and the attacker succeeds with a non critical success
				sAttackResult == "CRITICAL SUCCESS" and sDefenseResult == "CRITICAL SUCCESS" and nAttackResult&lt;=nDefenseResult then -- Both attacker and defencer succeed with critical success and attaker roll &lt;= defender roll
					-- Critical miss
					rMessage.text = sAttackerName.." vs "..sDefenderName..": "..sAttackerName.." "..Interface.getString("cast_def_crit_hit");
					rMessage.icon = "roll_cast_crit_miss";
				elseif tResults[sDefenseResult].nRange&lt;0 or -- The defender fails
				sAttackResult ~= "CRITICAL SUCCESS" and sDefenseResult ~= "CRITICAL SUCCESS" and nAttackResult&gt;nDefenseResult then -- Both attacker and defencer succeed with non critical success and attaker roll &gt; defender roll
					-- normal success
					rMessage.text = sAttackerName.." vs "..sDefenderName..": "..Interface.getString("cast_hit");
					rMessage.icon = "roll_cast_hit";
				else -- The defender wins the opposed test
					-- Normal miss
					rMessage.text = sAttackerName.." vs "..sDefenderName..": "..sAttackerName.." "..Interface.getString("cast_miss");
					rMessage.icon = "roll_cast_miss";					
				end
				if tResults[sDefenseResult].nRange&gt;0 and tResults[sAttackResult].nRange&gt;0 then
					rMessage.text = rMessage.text.." ("..nAttackResult.." vs "..nDefenseResult..")";
				end
			else -- The atacker fails
				rMessage.text = sAttackerName.." vs "..sDefenderName..": "..Interface.getString("cast_miss");
				rMessage.icon = "roll_cast_miss";									
				if sAttackResult=="CRITICAL FAILURE" then
					rMessage.text = sAttackerName.." vs "..sDefenderName..": "..sAttackerName.." "..Interface.getString("cast_crit_miss");
				end
			end
			Comm.deliverChatMessage(rMessage);
			tSleightAttacks[sSourceCTNode][sTargetCTNode]={};
			
--			AddCombatResult(sSourceCTNode, sTargetCTNode, "SLEIGHT", sAttackResult);
		elseif bAttacker and tResults[sAttackResult].nRange&lt;0 then -- The atacker fails and there is no defence roll
			rMessage.text = sAttackerName.." vs "..sDefenderName..": "..Interface.getString("cast_miss");
			rMessage.icon = "roll_cast_miss";									
			if sAttackResult=="CRITICAL FAILURE" then
				rMessage.text = sAttackerName.." vs "..sDefenderName..": "..sAttackerName.." "..Interface.getString("cast_crit_miss");
			end
			Comm.deliverChatMessage(rMessage);
			tSleightAttacks[sSourceCTNode][sTargetCTNode]={};
		elseif bAttacker and tResults[sAttackResult].nRange&gt;0 then -- The atacker succeeds and there is no defence roll
			rMessage.text = sAttackerName.." vs "..sDefenderName..": "..Interface.getString("cast_possible_hit")..". "..sDefenderName.." "..Interface.getString("cast_defence_roll_required").." (vs "..nAttackResult..")";
			rMessage.icon = "roll_cast_possible_hit";
			Comm.deliverChatMessage(rMessage);
			return true;
		end
	end
	return false;
end

function OOBAddAttack(msgOOB)
	if Session.IsHost then
		AddAttack(msgOOB.sSourceCTNode, msgOOB.sTargetCTNode, msgOOB.sTypeAttack, msgOOB.sTypeResult, msgOOB.sResult, tonumber(msgOOB.nRollTotal), tonumber(msgOOB.nTarget), msgOOB.bModifiedRoll=="true", tonumber(msgOOB.nPerc));
	end
end

function AddAttack(sSourceCTNode, sTargetCTNode, sTypeAttack, sTypeResult, sResult, nRollTotal, nTarget, bModifiedRoll, nPerc)
--	sTypeAttack: MELEE, RANGED
--	sTypeResult: Defense, Attack
	if sSourceCTNode and sTargetCTNode and sTypeAttack and sTypeResult and sResult and nRollTotal and nTarget then
		if Session.IsHost then
			if tResults[sResult].nRange&gt;0 and nPerc and nPerc&lt;100 then
				GameSystem.actions["HitChanceCheck"] = { bUseModStack = "false", sTargeting = "none" }
				ActionsManager.registerResultHandler("HitChanceCheck", RollHandlers.HitChanceHandler);
				local aDice2, nMod2 = StringManager.convertStringToDice("1d100");
				local rRoll = { sType = "HitChanceCheck", sDesc = "[HIT CHANCE "..nPerc.."%]", aDice = aDice2, nMod = nMod2, sTypeAttack=sTypeAttack, sTypeResult=sTypeResult, sResult=sResult, nRollTotal=nRollTotal, nTarget=nTarget, bModifiedRoll=bModifiedRoll, nPerc=nPerc};
				local rTargetNode=DB.findNode(sTargetCTNode);
				local rSourceNode=DB.findNode(sSourceCTNode);
				local tTargetGroups=ActionsManager.getTargeting(rSourceNode, rTargetNode, rRoll.sType, { rRoll });
				ActionsManager.actionRoll(rSourceNode, tTargetGroups, { rRoll });
				return;
			end

			if not tAttacts[sSourceCTNode] then
				tAttacts[sSourceCTNode]={};
			end
			if not tAttacts[sSourceCTNode][sTargetCTNode] then
				tAttacts[sSourceCTNode][sTargetCTNode]={};
			end
			if not tAttacts[sSourceCTNode][sTargetCTNode][sTypeAttack] then
				tAttacts[sSourceCTNode][sTargetCTNode][sTypeAttack]={};
			end
			
			tAttacts[sSourceCTNode][sTargetCTNode][sTypeAttack]["s"..sTypeResult.."Result"]=sResult;
			tAttacts[sSourceCTNode][sTargetCTNode][sTypeAttack]["n"..sTypeResult.."Result"]=nRollTotal;
			
			if sTypeResult=="Attack" and not bModifiedRoll then
				StoreUnresolvedRoll(sSourceCTNode, sTargetCTNode, sTypeAttack, sTypeResult, sResult, nRollTotal, nTarget);
			elseif sTypeResult=="Defense" and not bModifiedRoll then
				StoreUnresolvedRoll(sTargetCTNode, sSourceCTNode, sTypeAttack, sTypeResult, sResult, nRollTotal, nTarget);
			end
			
			local bOpposedRollNeeded=ResolveCombat(sSourceCTNode, sTargetCTNode, sTypeAttack);
			
			if bOpposedRollNeeded and OptionsManager.isOption("AUTODEFENSEROLL", "on") then
				GameSystem.actions["DefenseCheck"] = { bUseModStack = "true", sIcon = "action_attack", sTargeting = "all" }
				ActionsManager.registerResultHandler("DefenseCheck", RollHandlers.CombatHandler);
				local sSkill, nDefenseTarget = Tools.getDefenderSkillAndTarget(sTargetCTNode, sTypeAttack);
				local aDice2, nMod2 = StringManager.convertStringToDice("1d100");
				local rRoll = { sType = "DefenseCheck", sDesc = "["..sTypeAttack.." DEFENSE] "..sSkill.." (vs "..nDefenseTarget..")", aDice = aDice2, nMod = nMod2};
				local rTargetNode=DB.findNode(sTargetCTNode);
				local tTargetGroups=ActionsManager.getTargeting(rTargetNode, DB.findNode(sSourceCTNode), rRoll.sType, { rRoll });
				ActionsManager.actionRoll(rTargetNode, tTargetGroups, { rRoll });
			end
		else
			local msgOOB={type=OOB_ADD_ATTACK, sSourceCTNode=sSourceCTNode, sTargetCTNode=sTargetCTNode, sTypeAttack=sTypeAttack, sTypeResult=sTypeResult, sResult=sResult, nRollTotal=nRollTotal, nTarget=nTarget};
			if bModifiedRoll then
				msgOOB.bModifiedRoll="true";
			else
				msgOOB.bModifiedRoll="false";
			end
			if nPerc then
				msgOOB.nPerc=nPerc;
			else
				msgOOB.nPerc=100;
			end
			Comm.deliverOOBMessage(msgOOB);
		end
	end
end

function OOBAddSleightAttack(msgOOB)
	if Session.IsHost then
		AddSleightAttack(msgOOB.sSourceCTNode, msgOOB.sTargetCTNode, msgOOB.sTypeResult, msgOOB.sResult, tonumber(msgOOB.nRollTotal), tonumber(msgOOB.nTarget), msgOOB.bModifiedRoll=="true");
	end
end

function AddSleightAttack(sSourceCTNode, sTargetCTNode, sTypeResult, sResult, nRollTotal, nTarget, bModifiedRoll)
	if sSourceCTNode and sTargetCTNode and sTypeResult and sResult and nRollTotal and nTarget then
		if Session.IsHost then
			if not tSleightAttacks[sSourceCTNode] then
				tSleightAttacks[sSourceCTNode]={};
			end
			if not tSleightAttacks[sSourceCTNode][sTargetCTNode] then
				tSleightAttacks[sSourceCTNode][sTargetCTNode]={};
			end
			tSleightAttacks[sSourceCTNode][sTargetCTNode]["s"..sTypeResult.."Result"]=sResult;
			tSleightAttacks[sSourceCTNode][sTargetCTNode]["n"..sTypeResult.."Result"]=nRollTotal;
			
			if sTypeResult=="Attack" and not bModifiedRoll then
				StoreUnresolvedRoll(sSourceCTNode, sTargetCTNode, "SLEIGHT", sTypeResult, sResult, nRollTotal, nTarget);
			elseif sTypeResult=="Defense" and not bModifiedRoll then
				StoreUnresolvedRoll(sTargetCTNode, sSourceCTNode, "SLEIGHT", sTypeResult, sResult, nRollTotal, nTarget);
			end

			if ResolveSleightAttack(sSourceCTNode, sTargetCTNode, sTypeAttack) then
				GameSystem.actions["DefenseSleightCheck"] = { bUseModStack = "true", sIcon = "action_attack", sTargeting = "all" }
				ActionsManager.registerResultHandler("DefenseSleightCheck", RollHandlers.SleightResultHandler);
				local nDefenseTarget = Tools.getDefenderWillTarget(sTargetCTNode);
				local aDice2, nMod2 = StringManager.convertStringToDice("1d100");
				local rRoll = { sType = "DefenseSleightCheck", sDesc = "[SLEIGHT DEFENSE] Willpower (vs "..nDefenseTarget..")", aDice = aDice2, nMod = nMod2};
				local rTargetNode=DB.findNode(sTargetCTNode);
				local tTargetGroups=ActionsManager.getTargeting(rTargetNode, DB.findNode(sSourceCTNode), rRoll.sType, { rRoll });
				ActionsManager.actionRoll(rTargetNode, tTargetGroups, { rRoll });
			end
		else
			local msgOOB={type=OOB_ADD_SLEIGHT_ATTACK, sSourceCTNode=sSourceCTNode, sTargetCTNode=sTargetCTNode, sTypeResult=sTypeResult, sResult=sResult, nRollTotal=nRollTotal, nTarget=nTarget};
			if bModifiedRoll then
				msgOOB.bModifiedRoll="true";
			else
				msgOOB.bModifiedRoll="false";
			end
			Comm.deliverOOBMessage(msgOOB);	
		end
	end
end

function StoreUnresolvedRoll(sSourceCTNode, sTargetCTNode, sTypeAttack, sTypeResult, sRollResult, nRollTotal, nRollTarget)
	if not sSourceCTNode or not sTargetCTNode or not sTypeResult or not sTypeAttack or not nRollTotal or not sRollResult or not tResults[sRollResult] or not nRollTarget then
		return;
	end
	local sTargetName=Tools.getName(sTargetCTNode);

	local rollsNode=DB.getChild(sSourceCTNode..".rolls");
	local bNodeFound=false;
	local rollNode;
	for _,n in pairs(DB.getChildren(rollsNode)) do
		if DB.getValue(n, "TargetCTNode", "")==sTargetCTNode and DB.getValue(n, "TypeResult", "")==sTypeResult and DB.getValue(n, "TypeAttack", "")==sTypeAttack then
			bNodeFound=true;
			rollNode=n;
		end
	end
	if not bNodeFound then
		rollNode=DB.createChild(rollsNode);
	end
	if rollNode then
		DB.setValue(rollNode, "RollResult", "string", tResults[sRollResult].sAbr);
		DB.setValue(rollNode, "RollTotal", "number", nRollTotal);
		DB.setValue(rollNode, "RollTarget", "number", nRollTarget);
		DB.setValue(rollNode, "RollText", "string", StringManager.capitalize(sTypeAttack:lower()).." "..sTypeResult.." vs "..sTargetName);
		DB.setValue(rollNode, "TargetCTNode", "string", sTargetCTNode);
		DB.setValue(rollNode, "TypeResult", "string", sTypeResult);
		DB.setValue(rollNode, "TypeAttack", "string", sTypeAttack);
		DB.setValue(rollNode, "ShowButtons", "number", 1);
		DB.setValue(rollNode, "CheckedRoll", "number", 0);
	end
end
</Script>
    <RegisterScript>true</RegisterScript>
    <Encoding />
  </Scripts>
</DocumentElement>