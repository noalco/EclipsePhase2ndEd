<DocumentElement xmlns="http://tempuri.org/Ruleset.xsd">
  <Scripts>
    <ScriptName>list_active_skills</ScriptName>
    <FolderID>3</FolderID>
    <Script>-- 
-- Please see the license.html file included with this distribution for 
-- attribution and copyright information.
--
local sFocus = "name";

function onInit()
	nNode=getDatabaseNode()
	DB.addHandler(Tools.getCharNodePath(nNode)..".Aptitudes.Scores", "onChildUpdate", onAptitudeUpdate);
	DB.addHandler(Tools.getCharNodePath(nNode)..".Background.SkillList", "onChildUpdate", onBackgroundSkillListUpdate);
	DB.addHandler(Tools.getCharNodePath(nNode)..".Career.SkillList", "onChildUpdate", onCareerSkillListUpdate);
	DB.addHandler(Tools.getCharNodePath(nNode)..".Interest.SkillList", "onChildUpdate", onInterestSkillListUpdate);
	onAptitudeUpdate();
	onBackgroundSkillListUpdate();
	onCareerSkillListUpdate();
	onInterestSkillListUpdate();
	constructDefaultSkills();
	CreatePaths();
	if newfocus then
		sFocus = newfocus[1];
	end
end

-- Create default skill selection
function constructDefaultSkills()
	-- Create missing entries for all known skills
	local entrymap = {};
	for _,w in pairs(getWindows()) do
		local sLabel = w.name.getValue();

		local t = DataCommon.ActiveSkills[sLabel];
		if t and not t.bHasField then
			if not entrymap[sLabel] then
				entrymap[sLabel] = { w };
			else
				table.insert(entrymap[sLabel], w);
			end
		end
	end

	-- Set properties and create missing entries for all known skills
	for k, t in pairs(DataCommon.ActiveSkills) do
		if not t.bHasField then
			local matches = entrymap[k];

			if not matches then
				local w = createWindow();
				if w then
					w.name.setValue(k);
					w.aptitude.setStringValue(t.sApt);
					w.Type.setStringValue(t.sType);
					w.AptMult.setValue(t.nAptMult);
					matches = { w };
--					if k=="Melee" then
--						DB.setValue(Tools.getCharNodePath(w.getDatabaseNode())..".Paths.MeleeSkillPath", "string", w.getDatabaseNode().getPath());
--					elseif k=="Guns" then
--						DB.setValue(Tools.getCharNodePath(w.getDatabaseNode())..".Paths.GunsSkillPath", "string", w.getDatabaseNode().getPath());
--					elseif k=="Fray" then
--						DB.setValue(Tools.getCharNodePath(w.getDatabaseNode())..".Paths.FraySkillPath", "string", w.getDatabaseNode().getPath());
--					elseif k=="Fray/2 (vs. ranged attacks)" then
--						DB.setValue(Tools.getCharNodePath(w.getDatabaseNode())..".Paths.Fray2SkillPath", "string", w.getDatabaseNode().getPath());
--					end
				end
			end
		end
	end

	-- Set properties for all skills
	for _,w in pairs(getWindows()) do
		w.updateWindow();
	end
end

function CreatePaths()
	for _,w in pairs(getWindows()) do
		local k=w.name.getValue();
		if k=="Melee" then
			DB.setValue(Tools.getCharNodePath(w.getDatabaseNode())..".Paths.MeleeSkillPath", "string", DB.getPath(w.getDatabaseNode()));
		elseif k=="Guns" then
			DB.setValue(Tools.getCharNodePath(w.getDatabaseNode())..".Paths.GunsSkillPath", "string", DB.getPath(w.getDatabaseNode()));
		elseif k=="Fray" then
			DB.setValue(Tools.getCharNodePath(w.getDatabaseNode())..".Paths.FraySkillPath", "string", DB.getPath(w.getDatabaseNode()));
		elseif k=="Fray/2 (vs. ranged attacks)" then
			DB.setValue(Tools.getCharNodePath(w.getDatabaseNode())..".Paths.Fray2SkillPath", "string", DB.getPath(w.getDatabaseNode()));
		end
	end
end

function onListChanged()
	update();
end

function update()
	local sEdit = getName() .. "_iedit";
	if window[sEdit] then
		local bEdit = (window[sEdit].getValue() == 1);
		for _,w in ipairs(getWindows()) do
			local bHasField=w.name.getValue()~="" and DataCommon.ActiveSkills[w.name.getValue()].bHasField
			w.idelete.setVisibility(bEdit and bHasField);
		end
	end
end

function addEntry(bFocus)
	local w = createWindow();
	if bFocus and w[sFocus] then
		w[sFocus].setFocus();
	end
	if self.onEntryAdded then
		self.onEntryAdded(w);
	end
	return w;
end

function addEntryWithField(bFocus, sSkill)
	local t=DataCommon.ActiveSkills[sSkill];
	if t then
		local w=addEntry(false);
		w.name.setValue(sSkill);
		w.aptitude.setStringValue(t.sApt);
		w.aptitude.setReadOnly(sSkill~="Exotic Skill");
		w.Type.setStringValue(t.sType);
		w.Type.setReadOnly(sSkill~="Exotic Skill");
		w.Field.setVisible(true);
		w.AptMult.setValue(t.nAptMult);
		w.AptMult.setVisible(t.nAptMult&gt;1 or sSkill=="Exotic Skill");
		w.AptMult.setReadOnly(sSkill~="Exotic Skill");
		w.LabelX.setVisible(t.nAptMult&gt;1 or sSkill=="Exotic Skill");
--		if sSkill=="Exotic Skill" then
--			w.aptitude.setFrame("fieldark");
--			w.AptMult.setFrame("fieldark");
--		end
		w.UpdateBonus();
	end
end


function onAptitudeUpdate()
	for _,w in pairs(getWindows()) do
		w.updateWindow();
	end
end

function onBackgroundSkillListUpdate()
	SkillListUpdate("Background");
end

function onCareerSkillListUpdate()
	SkillListUpdate("Career");
end

function onInterestSkillListUpdate()
	SkillListUpdate("Interest");
end

function SkillListUpdate(sSkillType)
	local tSkills={}
	local sSkillName;
	for _,nodeSkill in pairs(DB.getChildren(Tools.getCharNodePath(getDatabaseNode()).."."..sSkillType..".SkillList")) do
		sSkillName=DB.getValue(nodeSkill, "Name", "");
		if sSkillName~="" and sSkillName~="Know" then
			tSkills[sSkillName]={};
			tSkills[sSkillName].Score=DB.getValue(nodeSkill, "Score", 0);
			tSkills[sSkillName].bHasField=DataCommon.ActiveSkills[sSkillName].bHasField;
			if tSkills[sSkillName].bHasField then
				tSkills[sSkillName].Field=DB.getValue(nodeSkill, "Field", ""):lower();
			end
		end
	end
	for _,w in pairs(getWindows()) do
		sSkillName=w.name.getValue()
		if tSkills[sSkillName] and (not tSkills[sSkillName].bHasField or tSkills[sSkillName].bHasField and tSkills[sSkillName].Field==w.Field.getValue():lower()) then
			w[sSkillType].setValue(tSkills[w.name.getValue()].Score);
		else
			w[sSkillType].setValue(0);
		end
	end
end

function UpdateFray2(bck, car, int, cp)
	for _,w in pairs(getWindows()) do
		if w.name.getValue()=="Fray/2 (vs. ranged attacks)" then
			w.Background.setValue(bck);
			w.Career.setValue(car);
			w.Interest.setValue(int);
			w.CustomizationPoints.setValue(cp);
			break;
		end
	end
end</Script>
    <RegisterScript>false</RegisterScript>
    <Encoding />
  </Scripts>
</DocumentElement>