<DocumentElement xmlns="http://tempuri.org/Ruleset.xsd">
  <Scripts>
    <ScriptName>npc_offensive_abilities</ScriptName>
    <FolderID>25</FolderID>
    <Script>local bParsed = false;
local aComponents = {};

-- The nDragMod and sDragLabel fields keep track of the entry under the cursor
local sDragLabel = nil;
local nDragMod = nil;
local bDragging = false;
local nAttackTarget=0;
local sDVRoll="";
local sDVMod="";
local sEffect="";
local bIsRange=false;
local sVsArmor="";
local bIsAP=false;
local sModReach=0;
local nHiddenCoverMod=0;
local nPerc=100;
local sModType="";

ATTACK=1;
DAMAGE=2;
EFFECT=3;


function onValueChanged()
	parseComponents();
end

-- Reset selection when the cursor leaves the control
function onHover(bOnControl)
	if bDragging or bOnControl then
		return;
	end

	if not bParsed then
--		parseComponents();
	end

	sDragLabel = nil;
	nDragMod = nil;
	setSelectionPosition(0);
end

function parseComponents()
	aComponents = {};
	local sText;
	local aSubStrings;
	local aSubStringsStats;
	local nNameDesp=0;
	
	local aClauses, aClauseStats = StringManager.split(getValue(), "\r\n", true);
	for i = 1, #aClauses do
        if aClauses[i]:lower():match("range") then
			bIsRange=true;
		else
			bIsRange=false;
        end
        
		sDragLabel, sText = aClauses[i]:match("(.*):(.*)");
		nNameDesp=(aClauses[i]:match("(.*:)") or ""):len();
		sDragLabel=StringManager.trim(sDragLabel);
		sText=StringManager.trim(sText);
		if sDragLabel and sText then
			aSubStrings, aSubStringsStats = StringManager.split(sText, ",", true);
			if sText:lower():match("armor%-piercing") then
				bIsAP=true;
			else
				bIsAP=false;
			end
			
			if sText:lower():match("reach") then
				if sText:lower():match("reach%s*%([%+]-%d+%)") then
					sModReach=tonumber(sText:lower():match("reach%s*%([%+]-(%d+)%)"));
				else
					sModReach=10;
				end
			else
				sModReach=0;
			end
			
			GetFields(aClauseStats[i].startpos, aSubStrings, aSubStringsStats, nNameDesp, bIsRange, bIsAP, sModReach);
		end		
	end
		
	bParsed = true;
end

function GetFields(startpos, aSubStrings, aSubStringsStats, nNameDesp, bIsRange, bIsAP, sModReach)
	if aSubStrings and aSubStrings[1] and aSubStringsStats and string.match(aSubStrings[1], "(%d+)") then
		nAttackTarget = tonumber(string.match(aSubStrings[1], "(%d+)") or "0");
		table.insert(aComponents, {sLabel=sDragLabel, nAttackTarget=nAttackTarget, nRollType=ATTACK, nStart=startpos, nEnd=startpos+aSubStringsStats[1].endpos+nNameDesp, bIsRange=bIsRange, sModReach=sModReach});--, aDVRoll
		for i=2,#aSubStrings do
			aSubStrings[i]=StringManager.strip(aSubStrings[i]);
			if aSubStrings[i]:match("DV%s*%d+d%d+") then
				sDVRoll=aSubStrings[i]:match("DV%s*(%d+d%d+)");
				sDVMod=aSubStrings[i]:match("DV%s*%d+d%d+%s*([%+%-]%s*%d*)") or "";
				sVsArmor=aSubStrings[i]:match("DV%s*%d+d%d+%s*[%+%-]%s*%d*%s%(([KE])%)") or "";
				table.insert(aComponents, {sLabel=sDragLabel, sDVRoll=sDVRoll, sDVMod=sDVMod, nRollType=DAMAGE, nStart=startpos+aSubStringsStats[i].startpos+nNameDesp, nEnd=startpos+aSubStringsStats[i].endpos+nNameDesp, sVsArmor=sVsArmor, bIsRange=bIsRange, bIsAP=bIsAP});
			end
		end
	end
end

-- Reset selection when the cursor leaves the control
function onHover(bOnControl)
	if bDragging or bOnControl then
		return;
	end

	if not bParsed then
		parseComponents();
	end

	sDragLabel = nil;
	nDragMod = nil;
	setSelectionPosition(0);
end

-- Hilight skill hovered on
function onHoverUpdate(x, y)
	if bDragging then
		return;
	end

	if not bParsed then
		parseComponents();
	end
	local nMouseIndex = getIndexAt(x, y);

	for i = 1, #aComponents, 1 do
		if aComponents[i].nRollType == ATTACK then
			if aComponents[i].nStart &lt;= nMouseIndex and aComponents[i].nEnd &gt; nMouseIndex then
				setCursorPosition(aComponents[i].nStart);
				setSelectionPosition(aComponents[i].nEnd);
				sDragLabel = aComponents[i].sLabel;
				setHoverCursor("hand");
				isAttack=true;
				isDamage=false;
				isEffect=false;
				nAttackTarget=aComponents[i].nAttackTarget;
				bIsRange=aComponents[i].bIsRange;
				sModReach=aComponents[i].sModReach;
				return;
			end
		elseif aComponents[i].nRollType == DAMAGE then
			if aComponents[i].nStart &lt;= nMouseIndex and aComponents[i].nEnd &gt; nMouseIndex then
				setCursorPosition(aComponents[i].nStart);
				setSelectionPosition(aComponents[i].nEnd);
				sDragLabel = aComponents[i].sLabel;
				setHoverCursor("hand");
				isAttack=false;
				isDamage=true;
				isEffect=false;
				sDVRoll=aComponents[i].sDVRoll;
				sDVMod=aComponents[i].sDVMod;
				sVsArmor=aComponents[i].sVsArmor;
				bIsRange=aComponents[i].bIsRange;
				bIsAP=aComponents[i].bIsAP;
				return;
			end
		elseif aComponents[i].nRollType == EFFECT then
			if aComponents[i].nStart &lt;= nMouseIndex and aComponents[i].nEnd &gt; nMouseIndex then
				setCursorPosition(aComponents[i].nStart);
				setSelectionPosition(aComponents[i].nEnd);
				sDragLabel = aComponents[i].sLabel;
				setHoverCursor("hand");
				isAttack=false;
				isDamage=false;
				isEffect=true;
				sEffect=aComponents[i].sEffect;
				return;
			end
		end
	end

	nAttackTarget=0;
	sDVRoll="";
	sDVMod="";
	sEffect="";
	sDragLabel = nil;
	nDragMod = nil;
	bIsRange=false;
	sVsArmor="";
	setHoverCursor("arrow");
	bIsAP=false;
	sModReach=0;
end

function onBeforeDiceRoll()
	if isAttack then
		DiceRollAdditionalInfo["sModReach"] = sModReach;
		DiceRollAdditionalInfo["sTarget"]=nAttackTarget+nHiddenCoverMod;
		DiceRollAdditionalInfo["sPerc"]=nPerc;
	elseif isDamage then
		ActionsManager.actionRoll=RollHandlers.NewActionRoll;
	end
end

function onAfterDiceRoll()
	if isDamage then
		ActionsManager.actionRoll=RollHandlers.OldActionRoll;
	end
end

function action(draginfo)
	local sActionType="";
	if sDragLabel then
		if isAttack then
			local sAttackType="";
			if bIsRange then
				sAttackType="RANGED ";
			else
				sAttackType="MELEE ";
			end
			
			nHiddenCoverMod, nPerc, sModType=Modifiers.getCoverHiddenModifier();
			local sCoverHidden="";
			if nHiddenCoverMod ~=0 then
				sCoverHidden=" ["..sModType..": "..nHiddenCoverMod
				if nPerc&lt;100 then
					sCoverHidden=sCoverHidden.." ("..nPerc.."% hit chance)";
				end
				sCoverHidden=sCoverHidden.."]";
			end
			
			DiceRollDescription = "["..sAttackType.."ATTACK] "..sDragLabel.." vs "..(nAttackTarget+nHiddenCoverMod)..sCoverHidden;
			GameSystem.actions["AttackCheck"] = { bUseModStack = "true", sIcon = "action_attack", sTargeting = "each"}
			sActionType="AttackCheck";
			ActionsManager.registerResultHandler("AttackCheck", RollHandlers.AttackResultHandler);
			DiceRollString="1d100";
		elseif isDamage then
			local sAttackType="";
			if bIsRange then
				sAttackType="RANGED ";
			else
				sAttackType="MELEE ";
			end
			DiceRollDescription = "["..sAttackType.."DAMAGE] "..sDragLabel;
			if sVsArmor=="E" then
				DiceRollDescription=DiceRollDescription.." vs Energy";
			elseif sVsArmor=="K" then
				DiceRollDescription=DiceRollDescription.." vs Kinetic";
			end
			if bIsAP then
				DiceRollDescription=DiceRollDescription.." [Armor-Piercing]";
			end
			GameSystem.actions["Damage"] = { bUseModStack = "true", sIcon = "action_damage", sTargeting = "each"}
			sActionType="Damage";
			ActionsManager.registerResultHandler("Damage", RollHandlers.DamageResultHandler);
			ActionsManager.registerTargetingHandler("Damage", RollHandlers.DamageTargetingHandler);
			DiceRollString=sDVRoll..sDVMod;
		elseif isEffect then
			DiceRollDescription = "";
			GameSystem.actions["Effect"] = { bUseModStack = "false", sIcon = ""}
			sActionType="Effect";
			DiceRollString="";
		end
		
		DiceRollAdditionalInfo = {};
		if onBeforeDiceRoll then if onBeforeDiceRoll() == false then return; end; end;
		local windataref = window.getDatabaseNode();
		if windataref == nil then windataref = window; end;
		RulesetWizardDiceRoller.Roll(draginfo, windataref, sActionType, DiceRollDescription, DiceRollString, getValue(), DiceRollAdditionalInfo);
		ModifierStack.reset();
		if onAfterDiceRoll then onAfterDiceRoll(); end;
		return true;
	end
end

function onDoubleClick(x, y)
	bEsDobleClick=true;
	action();
	return true;
end

function onDragStart(button, x, y, draginfo)
	action(draginfo);

	bDragging = true;
	setCursorPosition(0);
	
	return true;
end

function onDragEnd(draginfo)
	bDragging = false;
end

-- Suppress default processing to support dragging
function onClickDown(button, x, y)
	return true;
end

-- On mouse click, set focus, set cursor position and clear selection
function onClickRelease(button, x, y)
	setFocus();
	
	local n = getIndexAt(x, y);
	setSelectionPosition(n);
	setCursorPosition(n);
	
	return true;
end</Script>
    <RegisterScript>false</RegisterScript>
    <Encoding />
  </Scripts>
</DocumentElement>